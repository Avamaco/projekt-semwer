{-

This file contains the grammar of JEZYK plus explanations how to render them
in BNFC.

-}

VId. Var ::= Ident;
VAt. Var ::= Ident "at" Expr;

AId. Arg ::= Ident;
ASeq. Arg ::= Ident "," Arg;

-- BNFC expressions that define the part of the grammar for statements

SCall.     Stmt ::= "call" Ident;
SCallA.     Stmt ::= "call" Ident "with" Arg;
SAssgn.    Stmt1 ::= "set" Var "to" Expr;
SAssgnB.    Stmt1 ::= "set" Var "to" BExpr;
SAssgnF.    Stmt1 ::= "set" Var "to call" Ident;
SAssgnFA.    Stmt1 ::= "set" Var "to call" Ident "with" Arg;
SDel.     Stmt1 ::= "del" Expr "from" Ident;
-- We use this to declare a general form of expression, but parse it
-- differently.
SIfte. Stmt2 ::= "if" BExpr "then" Stmt "else" Stmt "end";
SIfend.       Stmt2 ::= "if" BExpr "then" Stmt "end";
SWhile.    Stmt2 ::= "while" BExpr "do" Stmt1;
SFor.      Stmt2 ::= "for" Ident "from" Expr "to" Expr "do" Stmt "end";
SForKeys.      Stmt2 ::= "for" Ident "in keys" Ident "do" Stmt "end";
SForVals.      Stmt2 ::= "for" Ident "in values" Ident "do" Stmt "end";
SForPairs.      Stmt2 ::= "for" Ident "," Ident "in" Ident "do" Stmt "end";
SPrint.     Stmt ::= "print" Ident;
SBlock.     Stmt ::= "begin" Decl ";" Stmt "end";
STry.       Stmt ::= "try" Stmt "catch" Stmt "end";
SSeq.      Stmt ::= Stmt1 ";" Stmt; 

_. Stmt ::= Stmt1;
_. Stmt1 ::= Stmt2;

-- BNFC expressions that define the part of the grammar for boolean expressions

BAnd.  BExpr ::= BExpr "&" BExpr1;
BOr.  BExpr ::= BExpr "|" BExpr1;
BNot.   BExpr1 ::= "!" BExpr3;
BEq.   BExpr2 ::= Expr1 "=" Expr1;
BLt.   BExpr2 ::= Expr1 "<" Expr1;
BLeq.   BExpr2 ::= Expr1 "<=" Expr1;
BGt.   BExpr2 ::= Expr1 ">" Expr1;
BGeq.   BExpr2 ::= Expr1 ">=" Expr1;
BNeq.   BExpr2 ::= Expr1 "!=" Expr1;
BTrue.  BExpr3 ::= "true";
BFalse. BExpr3 ::= "false";
BCheck. BExpr2  ::= "check" Expr "in" Ident;

_.       BExpr3 ::= "(" BExpr ")";
_.       BExpr2 ::= BExpr3;
_.       BExpr1 ::= BExpr2;
_.       BExpr ::= BExpr1;


-- BNFC expressions that define the part of the grammar for expressions

-- Hierarchy of expressions:
-- Number | Variable | Parentheses
-- Negation
-- Multiplication | Division
-- Addition | Substraction
-- Ternary

EPlus.   Expr1  ::= Expr1 "+" Expr2;
EMinus.  Expr1  ::= Expr1 "-" Expr2;
EMul.    Expr2 ::= Expr2 "*" Expr3; 
EDiv.    Expr2 ::= Expr2 "/" Expr3; 
ENeg.    Expr3  ::= "-" Expr4;
ENum.    Expr4 ::= Integer;
EVar.    Expr4 ::= Ident;
Etern.   Expr  ::= BExpr "?" Expr1 ":" Expr1;

_.       Expr4 ::= "(" Expr ")"; -- We silently introduce parentheses 
_.       Expr3  ::= Expr4;       -- We silently make Expr3 and Expr4 equal
_.       Expr2  ::= Expr3;       -- We silently make Expr2 and Expr3 equal
_.       Expr1  ::= Expr2;       -- We silently make Expr1 and Expr2 equal
_.       Expr ::= Expr1;         -- We silently make Expr and Expr1 equal


-- BNFC expressions that define the part of the grammar for types

TBool. Type ::= "bool";
TInt. Type ::= "int";
CTArray. CType ::= "array of" Integer Type;
CTDict. CType ::= "dict of" Type;

-- BNFC expressions that define the part of the grammar for declarations

ADId. ADecl ::= Ident "of" Type;
ADSeq. ADecl ::= Ident "of" Type "," ADecl;

FDVoid. FDecl ::= "fun to void";
FDRet. FDecl ::= "fun to" Ident "of" Type;
FDArg. FDecl ::= "fun from" ADecl "to void";
FDFull. FDecl ::= "fun from" ADecl "to" Ident "of" Type;

DSimple. Decl1 ::= "let" Ident "be" Type;
DComplex. Decl1 ::= "let" Ident "be" CType;
DFunction. Decl1 ::= "let" Ident "be" FDecl "do" Stmt "end";
DSeq. Decl ::= Decl ";" Decl1;

_. Decl ::= Decl1;