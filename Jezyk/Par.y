-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Jezyk.Par
  ( happyError
  , myLexer
  , pVar
  , pArg
  , pStmt
  , pStmt1
  , pStmt2
  , pBExpr
  , pBExpr1
  , pBExpr2
  , pBExpr3
  , pExpr1
  , pExpr2
  , pExpr3
  , pExpr4
  , pExpr
  , pType
  , pCType
  , pADecl
  , pFDecl
  , pDecl1
  , pDecl
  ) where

import Prelude

import qualified Jezyk.Abs
import Jezyk.Lex

}

%name pVar Var
%name pArg Arg
%name pStmt Stmt
%name pStmt1 Stmt1
%name pStmt2 Stmt2
%name pBExpr BExpr
%name pBExpr1 BExpr1
%name pBExpr2 BExpr2
%name pBExpr3 BExpr3
%name pExpr1 Expr1
%name pExpr2 Expr2
%name pExpr3 Expr3
%name pExpr4 Expr4
%name pExpr Expr
%name pType Type
%name pCType CType
%name pADecl ADecl
%name pFDecl FDecl
%name pDecl1 Decl1
%name pDecl Decl
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '!='     { PT _ (TS _ 2)  }
  '&'      { PT _ (TS _ 3)  }
  '('      { PT _ (TS _ 4)  }
  ')'      { PT _ (TS _ 5)  }
  '*'      { PT _ (TS _ 6)  }
  '+'      { PT _ (TS _ 7)  }
  ','      { PT _ (TS _ 8)  }
  '-'      { PT _ (TS _ 9)  }
  '/'      { PT _ (TS _ 10) }
  ':'      { PT _ (TS _ 11) }
  ';'      { PT _ (TS _ 12) }
  '<'      { PT _ (TS _ 13) }
  '<='     { PT _ (TS _ 14) }
  '='      { PT _ (TS _ 15) }
  '>'      { PT _ (TS _ 16) }
  '>='     { PT _ (TS _ 17) }
  '?'      { PT _ (TS _ 18) }
  'array'  { PT _ (TS _ 19) }
  'at'     { PT _ (TS _ 20) }
  'be'     { PT _ (TS _ 21) }
  'begin'  { PT _ (TS _ 22) }
  'bool'   { PT _ (TS _ 23) }
  'call'   { PT _ (TS _ 24) }
  'catch'  { PT _ (TS _ 25) }
  'check'  { PT _ (TS _ 26) }
  'del'    { PT _ (TS _ 27) }
  'dict'   { PT _ (TS _ 28) }
  'do'     { PT _ (TS _ 29) }
  'else'   { PT _ (TS _ 30) }
  'end'    { PT _ (TS _ 31) }
  'false'  { PT _ (TS _ 32) }
  'for'    { PT _ (TS _ 33) }
  'from'   { PT _ (TS _ 34) }
  'fun'    { PT _ (TS _ 35) }
  'if'     { PT _ (TS _ 36) }
  'in'     { PT _ (TS _ 37) }
  'int'    { PT _ (TS _ 38) }
  'keys'   { PT _ (TS _ 39) }
  'let'    { PT _ (TS _ 40) }
  'of'     { PT _ (TS _ 41) }
  'print'  { PT _ (TS _ 42) }
  'set'    { PT _ (TS _ 43) }
  'then'   { PT _ (TS _ 44) }
  'to'     { PT _ (TS _ 45) }
  'true'   { PT _ (TS _ 46) }
  'try'    { PT _ (TS _ 47) }
  'values' { PT _ (TS _ 48) }
  'void'   { PT _ (TS _ 49) }
  'while'  { PT _ (TS _ 50) }
  'with'   { PT _ (TS _ 51) }
  '|'      { PT _ (TS _ 52) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }

%%

Ident :: { Jezyk.Abs.Ident }
Ident  : L_Ident { Jezyk.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Var :: { Jezyk.Abs.Var }
Var
  : Ident { Jezyk.Abs.VId $1 }
  | Ident 'at' Expr { Jezyk.Abs.VAt $1 $3 }

Arg :: { Jezyk.Abs.Arg }
Arg
  : Ident { Jezyk.Abs.AId $1 }
  | Ident ',' Arg { Jezyk.Abs.ASeq $1 $3 }

Stmt :: { Jezyk.Abs.Stmt }
Stmt
  : 'call' Ident { Jezyk.Abs.SCall $2 }
  | 'call' Ident 'with' Arg { Jezyk.Abs.SCallA $2 $4 }
  | 'print' Ident { Jezyk.Abs.SPrint $2 }
  | 'begin' Decl ';' Stmt 'end' { Jezyk.Abs.SBlock $2 $4 }
  | 'try' Stmt 'catch' Stmt 'end' { Jezyk.Abs.STry $2 $4 }
  | Stmt1 ';' Stmt { Jezyk.Abs.SSeq $1 $3 }
  | Stmt1 { $1 }

Stmt1 :: { Jezyk.Abs.Stmt }
Stmt1
  : 'set' Var 'to' Expr { Jezyk.Abs.SAssgn $2 $4 }
  | 'set' Var 'to' BExpr { Jezyk.Abs.SAssgnB $2 $4 }
  | 'set' Var 'to' 'call' Ident { Jezyk.Abs.SAssgnF $2 $5 }
  | 'set' Var 'to' 'call' Ident 'with' Arg { Jezyk.Abs.SAssgnFA $2 $5 $7 }
  | 'del' Expr 'from' Ident { Jezyk.Abs.SDel $2 $4 }
  | Stmt2 { $1 }

Stmt2 :: { Jezyk.Abs.Stmt }
Stmt2
  : 'if' BExpr 'then' Stmt 'else' Stmt 'end' { Jezyk.Abs.SIfte $2 $4 $6 }
  | 'if' BExpr 'then' Stmt 'end' { Jezyk.Abs.SIfend $2 $4 }
  | 'while' BExpr 'do' Stmt1 { Jezyk.Abs.SWhile $2 $4 }
  | 'for' Ident 'from' Expr 'to' Expr 'do' Stmt 'end' { Jezyk.Abs.SFor $2 $4 $6 $8 }
  | 'for' Ident 'in' 'keys' Ident 'do' Stmt 'end' { Jezyk.Abs.SForKeys $2 $5 $7 }
  | 'for' Ident 'in' 'values' Ident 'do' Stmt 'end' { Jezyk.Abs.SForVals $2 $5 $7 }
  | 'for' Ident ',' Ident 'in' Ident 'do' Stmt 'end' { Jezyk.Abs.SForPairs $2 $4 $6 $8 }

BExpr :: { Jezyk.Abs.BExpr }
BExpr
  : BExpr '&' BExpr1 { Jezyk.Abs.BAnd $1 $3 }
  | BExpr '|' BExpr1 { Jezyk.Abs.BOr $1 $3 }
  | BExpr1 { $1 }

BExpr1 :: { Jezyk.Abs.BExpr }
BExpr1 : '!' BExpr3 { Jezyk.Abs.BNot $2 } | BExpr2 { $1 }

BExpr2 :: { Jezyk.Abs.BExpr }
BExpr2
  : Expr1 '=' Expr1 { Jezyk.Abs.BEq $1 $3 }
  | Expr1 '<' Expr1 { Jezyk.Abs.BLt $1 $3 }
  | Expr1 '<=' Expr1 { Jezyk.Abs.BLeq $1 $3 }
  | Expr1 '>' Expr1 { Jezyk.Abs.BGt $1 $3 }
  | Expr1 '>=' Expr1 { Jezyk.Abs.BGeq $1 $3 }
  | Expr1 '!=' Expr1 { Jezyk.Abs.BNeq $1 $3 }
  | 'check' Expr 'in' Ident { Jezyk.Abs.BCheck $2 $4 }
  | BExpr3 { $1 }

BExpr3 :: { Jezyk.Abs.BExpr }
BExpr3
  : 'true' { Jezyk.Abs.BTrue }
  | 'false' { Jezyk.Abs.BFalse }
  | '(' BExpr ')' { $2 }

Expr1 :: { Jezyk.Abs.Expr }
Expr1
  : Expr1 '+' Expr2 { Jezyk.Abs.EPlus $1 $3 }
  | Expr1 '-' Expr2 { Jezyk.Abs.EMinus $1 $3 }
  | Expr2 { $1 }

Expr2 :: { Jezyk.Abs.Expr }
Expr2
  : Expr2 '*' Expr3 { Jezyk.Abs.EMul $1 $3 }
  | Expr2 '/' Expr3 { Jezyk.Abs.EDiv $1 $3 }
  | Expr3 { $1 }

Expr3 :: { Jezyk.Abs.Expr }
Expr3 : '-' Expr4 { Jezyk.Abs.ENeg $2 } | Expr4 { $1 }

Expr4 :: { Jezyk.Abs.Expr }
Expr4
  : Integer { Jezyk.Abs.ENum $1 }
  | Ident { Jezyk.Abs.EVar $1 }
  | '(' Expr ')' { $2 }

Expr :: { Jezyk.Abs.Expr }
Expr
  : BExpr '?' Expr1 ':' Expr1 { Jezyk.Abs.Etern $1 $3 $5 }
  | Expr1 { $1 }

Type :: { Jezyk.Abs.Type }
Type : 'bool' { Jezyk.Abs.TBool } | 'int' { Jezyk.Abs.TInt }

CType :: { Jezyk.Abs.CType }
CType
  : 'array' 'of' Integer Type { Jezyk.Abs.CTArray $3 $4 }
  | 'dict' 'of' Type { Jezyk.Abs.CTDict $3 }

ADecl :: { Jezyk.Abs.ADecl }
ADecl
  : Ident 'of' Type { Jezyk.Abs.ADId $1 $3 }
  | Ident 'of' Type ',' ADecl { Jezyk.Abs.ADSeq $1 $3 $5 }

FDecl :: { Jezyk.Abs.FDecl }
FDecl
  : 'fun' 'to' 'void' { Jezyk.Abs.FDVoid }
  | 'fun' 'to' Ident 'of' Type { Jezyk.Abs.FDRet $3 $5 }
  | 'fun' 'from' ADecl 'to' 'void' { Jezyk.Abs.FDArg $3 }
  | 'fun' 'from' ADecl 'to' Ident 'of' Type { Jezyk.Abs.FDFull $3 $5 $7 }

Decl1 :: { Jezyk.Abs.Decl }
Decl1
  : 'let' Ident 'be' Type { Jezyk.Abs.DSimple $2 $4 }
  | 'let' Ident 'be' CType { Jezyk.Abs.DComplex $2 $4 }
  | 'let' Ident 'be' FDecl 'do' Stmt 'end' { Jezyk.Abs.DFunction $2 $4 $6 }

Decl :: { Jezyk.Abs.Decl }
Decl : Decl ';' Decl1 { Jezyk.Abs.DSeq $1 $3 } | Decl1 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

