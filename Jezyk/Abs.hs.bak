-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Jezyk.

module Jezyk.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Var = VId Ident | VAt Ident Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = AId Ident | ASeq Ident Arg
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = SCall Ident
    | SCallA Ident Arg
    | SAssgn Var Expr
    | SAssgnF Var Ident
    | SAssgnFA Var Ident Arg
    | SDel Expr Ident
    | SIfte BExpr Stmt Stmt
    | SIfend BExpr Stmt
    | SWhile BExpr Stmt
    | SFor Ident Expr Expr Stmt
    | SForKeys Ident Ident Stmt
    | SForVals Ident Ident Stmt
    | SForPairs Ident Ident Ident Stmt
    | SPrint Ident
    | SBlock Decl Stmt
    | STry Stmt Stmt
    | SSeq Stmt Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BExpr
    = BAnd BExpr BExpr
    | BOr BExpr BExpr
    | BNot BExpr
    | BEq Expr Expr
    | BLt Expr Expr
    | BLeq Expr Expr
    | BGt Expr Expr
    | BGeq Expr Expr
    | BNeq Expr Expr
    | BTrue
    | BFalse
    | BCheck Expr Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EPlus Expr Expr
    | EMinus Expr Expr
    | EMul Expr Expr
    | EDiv Expr Expr
    | ENeg Expr
    | ENum Integer
    | EVar Ident
    | Etern BExpr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type = TBool | TInt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CType = CTArray Integer Type | CTDict Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ADecl = ADId Ident Type | ADSeq Ident Type ADecl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FDecl
    = FDVoid | FDRet Ident Type | FDArg ADecl | FDFull ADecl Ident Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = DSimple Ident Type
    | DComplex Ident CType
    | DFunction Ident FDecl Stmt
    | DSeq Decl Decl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

